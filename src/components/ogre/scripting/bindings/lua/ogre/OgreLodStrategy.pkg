/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2005 The OGRE Team
Also see acknowledgements in Readme.html

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.
-----------------------------------------------------------------------------
*/


namespace Ogre
{

class LodStrategy
    {
    public:
        /** Get the value of the first (highest) level of detail. */
        //virtual Real getBaseValue() const = 0;

        /** Transform lod bias so it only needs to be multiplied by the lod value. */
        //virtual Real transformBias(Real factor) const = 0;

        /** Transforum user supplied value to internal value.
        @remarks
            By default, performs no transformation.
        @remarks
            Do not throw exceptions for invalid values here, as the lod strategy
            may be changed such that the values become valid.
        */
        float transformUserValue(float userValue) const;

        /** Compute the lod value for a given movable object relative to a given camera. */
        //Real getValue(const MovableObject *movableObject, const Camera *camera) const;

        /** Get the index of the lod usage which applies to a given value. */
       // virtual ushort getIndex(Real value, const Mesh::MeshLodUsageList& meshLodUsageList) const = 0;

        /** Get the index of the lod usage which applies to a given value. */
        //virtual ushort getIndex(Real value, const Material::LodValueList& materialLodValueList) const = 0;

        /** Sort mesh lod usage list from greatest to least detail */
        //virtual void sort(Mesh::MeshLodUsageList& meshLodUsageList) const = 0;

        /** Determine if the lod values are sorted from greatest detail to least detail. */
        //virtual bool isSorted(const Mesh::LodValueList& values) const = 0;

        /** Assert that the lod values are sorted from greatest detail to least detail. */
        //void assertSorted(const Mesh::LodValueList& values) const;

        /** Get the name of this strategy. */
        //const String& getName() const { return mName; }
    };

}
#endif
