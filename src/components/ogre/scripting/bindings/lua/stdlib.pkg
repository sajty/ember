namespace std {
class vector {

        TEMPLATE_BIND(T, std::string, float, Ember::OgreView::Model::SubModelDefinition*, Ember::OgreView::Model::PartDefinition*, Ember::OgreView::Model::SubEntityDefinition*, Eris::Task*, Ember::OgreView::EntityPickResult, Ember::OgreView::Model::AttachPointDefinition, Ember::OgreView::Model::AnimationPartDefinition*, Ember::OgreView::Model::AnimationDefinition*, Ember::OgreView::Model::SoundDefinition*, Ember::OgreView::Model::ActivationDefinition*, Ember::OgreView::Model::ActionDefinition*)

        void clear();
        int size() const;

        const T& operator[](int index) const;
        T& operator[](int index);
        void push_back(T val);

        vector();
        ~vector();
};

class set {
 
        TEMPLATE_BIND(T, std::string)
 
         void clear();
         int size() const;

         //const T& operator[](int index) const;
         //T& operator[](int index);
         //void push_back(T val);
 
         set();
         ~set();
};

// class map {
// 
//         TEMPLATE_BIND(T T1, std::string Ember::OgreView::Model::SubModelPart*)
// 
//         void clear();
//         int size() const;
// 
//         const T& operator[] @ gett(T1 index) const;
//         T& operator[] @ gett(T1  index);
//         //void push_back(T val);
// 
//         map();
//         ~map();
// };

// class map {
// 
//         TEMPLATE_BIND(K V, std::string Ember::OgreView::Model::SubModelPart*)
// 
//         V get_element(K key);
//         void set_element(K key, V value);
// 
//         map();
//         ~map();
// };
}
