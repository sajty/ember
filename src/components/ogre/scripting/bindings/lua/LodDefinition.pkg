/*
 * Copyright (C) 2012 Peter Szucs <peter.szucs.dev@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Ember
{
namespace OgreView
{
namespace Lod
{

/**
 * @brief Improved version of Ogre::ProgressiveMesh.
 */
class ProgressiveMeshGenerator
{
public:
	/**
	 * @brief Type of the reduction.
	 * 
	 * Note: The vertex count is determined by unique vertices per submesh.
	 * A mesh may have duplicate vertices with same position.
	 */
	enum VertexReductionMethod {
		/**
		 * @brief Percentage of vertexes to be removed from each submesh.
		 * 
		 * Valid range is a number between 0.0 and 1.0
		 */
		VRM_PROPORTIONAL,
		
		/**
		 * @brief Exact vertex count to be removed from each submesh.
		 * 
		 * Pass only integers or it will be rounded.
		 */
		VRM_CONSTANT,
		
		/**
		 * @brief Reduces the vertices, until the cost is bigger then the given value.
		 * 
		 * Collapse cost is equal to the amount of artifact the reduction causes.
		 * This generates the best Lod output, but the collapse cost depends on implementation.
		 */
		VRM_COLLAPSE_COST
	};
};

/**
 * @brief Lod Distance config container.
 */
class LodDistance
{
public:

	/**
	 * @brief Enumeration of Distance types.
	 */
	enum LodDistanceType {

		/**
		 * @brief A built in algorithm should reduce the vertex count.
		 */
		LDT_AUTOMATIC_VERTEX_REDUCTION,

		/**
		 * @brief User created mesh should be used.
		 */
		LDT_USER_CREATED_MESH
	};

	/**
	 * @brief Returns the type of the Lod Distance.
	 */
	Ember::OgreView::Lod::LodDistance::LodDistanceType getType() const;

	/**
	 * @brief Sets the type of the Lod Distance
	 */
	void setType(Ember::OgreView::Lod::LodDistance::LodDistanceType type);

	/**
	 * @brief Returns the mesh name of the Lod Distance, which is used in user created meshes.
	 */
	const std::string& getMeshName() const;

	/**
	 * @brief Sets the mesh name of the Lod Distance, which is used in user created meshes.
	 */
	void setMeshName(const std::string& meshName);

	/**
	 * @brief Returns the vertex reduction method of the Lod Distance, which is used in automatic vertex reduction.
	 */
	Ember::OgreView::Lod::ProgressiveMeshGenerator::VertexReductionMethod getReductionMethod() const;

	/**
	 * @brief Sets the vertex reduction method of the Lod Distance, which is used in automatic vertex reduction.
	 */
	void setReductionMethod(Ember::OgreView::Lod::ProgressiveMeshGenerator::VertexReductionMethod reductionMethod);

	/**
	 * @brief Returns the vertex reduction value of the Lod Distance, which is used in automatic vertex reduction.
	 */
	float getReductionValue() const;

	/**
	 * @brief Sets the vertex reduction value of the Lod Distance, which is used in automatic vertex reduction.
	 */
	void setReductionValue(float reductionValue);
};

/**
 * @brief Lod Definition resource. Each *.loddef file is represented by a LodDefinition instance.
 */
class LodDefinition :
	public Ogre::Resource
{
public:
	/**
	 * @brief Returns whether automatic mesh Lod management is used.
	 */
	bool getUseAutomaticLod() const;

	/**
	 * @brief Sets whether automatic mesh Lod management should be used.
	 */
	void setUseAutomaticLod(bool useAutomaticLod);

	/**
	 * @brief Adds a Lod distance to the manual Lod configuration.
	 */
	void addLodDistance(float distVal, const Ember::OgreView::Lod::LodDistance& distance);

	/**
	 * @brief Returns whether a Lod distance is existing in a manual Lod configuration.
	 */
	bool hasLodDistance(float distVal) const;

	/**
	 * @brief Returns a Lod distance from the manual Lod configuration.
	 */
	Ember::OgreView::Lod::LodDistance& getLodDistance(float distVal);

	/**
	 * @brief Returns a Lod distance count for the manual Lod configuration.
	 */
	int getLodDistanceCount();
	
	/**
	 * @brief Creates a list of distances in a sorted order.
	 * 
	 * This is meant for lua calls only.
	 */
	std::vector<float> createListOfDistances();

	/**
	 * @brief Creates a distance.
	 * 
	 * This is meant for lua calls only. Use addLodDistance() if you can.
	 */
	LodDistance& createDistance(float distance);

	/**
	 * @brief Removes a Lod distance from the manual Lod configuration.
	 */
	void removeLodDistance(float distVal);
};

class LodDefinitionPtr
{
	virtual ~LodDefinitionPtr();
	Ember::OgreView::Lod::LodDefinition* get();
};

}
}
}

