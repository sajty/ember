// This file may be redistributed and modified only under the terms of
// the GNU Lesser General Public License (See COPYING for details).
// Copyright (C) 2000-2001 Stefanus Du Toit, Karsten-O. Laux and Al Riddoch



namespace Atlas { 
namespace Message {

/// An exception class issued when the wrong type is requested in as().
// class WrongTypeException : public Atlas::Exception
// {
//   public:
//     WrongTypeException() : Atlas::Exception("Wrong Message::Element type") { }
// };



/** Multi-type container
 *
 * FIXME: Document this
 *
 * @author Stefanus Du Toit <sdt@gmx.net>
 *
 * Changes:
 *
 *   2003/04/02   Al Riddcoh <alriddoch@zepler.org>
 *                Add in some assignment operators for efficiency
 *   2002/11/07   Al Riddcoh <alriddoch@zepler.org>
 *                Changed the name to Element as Object is a stupid name
 *                for a class.
 *   2000/08/05   Karsten-O. Laux <klaux@rhrk.uni-kl.de>
 *                Changed the members to pointers which only get created when
 *                really needed. This is a major speedup for passing
 *                Object as parameter or when copying it.
 *                Because copying of unused members is omitted.  
 *                All pointers are stored as a union, so we save memory !
 *                Changed long to long and added convinience Constructors
 *                for float, int and bool
 *                


 */
class Element
{
    enum Type {
        TYPE_NONE,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_PTR,
        TYPE_STRING,
        TYPE_MAP,
        TYPE_LIST
    };


    /// Construct an empty object.
    Element();

    ///
    ~Element();

    /// Copy an existing object.
    Element(const Element& obj);

    /// Set type to int, and value to v.
    Element(int v);

    /// Set type to int, and value to v.
    Element(bool v);

    /// Set type to int, and value to v.
    Element(long v);

    /// Set type to double, and value to v.
    Element(float v);

    /// Set type to double, and value to v.
    Element(double v);

    /// Set type to void*, and value to v.
    Element(void* v);

    /// Set type to std::string, and value to v.
    Element(const char* v);

    /// Set type to std::string, and value to v.
    Element(const std::string& v);
    /// Set type to Atlas::Message::MapType, and value to v.
    Element(const Atlas::Message::MapType& v);
    /// Set type to Atlas::Message::ListType, and value to v.
    Element(const Atlas::Message::ListType& v);


    /// Check for equality with another Element.
    bool operator==(const Element& o) const;

    /// Check for equality with a int.
    bool operator==(long v) const;

    /// Check for equality with a double.
    bool operator==(double v) const;

    /// Check for equality with a pointer.
    bool operator==(void* v) const;

    /// Check for equality with a const char *.
    bool operator==(const char * v) const;

    /// Check for equality with a std::string.
    bool operator==(const std::string& v) const;

    /// Check for equality with a Atlas::Message::MapMapTypeType.
    bool operator==(const Atlas::Message::MapType& v) const;

    /// Check for equality with a Atlas::Message::ListType.
    bool operator==(const Atlas::Message::ListType& v) const;

    /// Get the current type.
    Atlas::Message::Element::Type getType() const;
    /// Check whether the current type is nothing.
    bool isNone() const ;
    /// Check whether the current type is int.
    bool isInt() const;
    /// Check whether the current type is double.
    bool isFloat() const ;
    /// Check whether the current type is pointer.
    bool isPtr() const;
    /// Check whether the current type is numeric.
    bool isNum() const;
    /// Check whether the current type is std::string.
    bool isString() const;
    /// Check whether the current type is Atlas::Message::MapType.
    bool isMap() const;
    /// Check whether the current type is Atlas::Message::ListType.
    bool isList() const;

    /// Retrieve the current value as a int.
    long asInt() const;
    long Int() const;
    /// Retrieve the current value as a double.
    double asFloat() const;
    double Float() const;
    /// Retrieve the current value as a pointer.
/*    void* asPtr() const ;
    void* Ptr() const;*/
    /// Retrieve the current value as a number.
    double asNum() const ;
    /// Retrieve the current value as a const std::string reference.
    const std::string& asString() const;
    /// Retrieve the current value as a non-const std::string reference.
    std::string& asString() ;
    const std::string& String() const;
    std::string& String();
    /// Retrieve the current value as a const Atlas::Message::MapType reference.
    const Atlas::Message::MapType& asMap() const ;
    /// Retrieve the current value as a non-const Atlas::Message::MapType reference.
    Atlas::Message::MapType& asMap();
    const Atlas::Message::MapType& Map() const;
    Atlas::Message::MapType& Map();
    /// Retrieve the current value as a const Atlas::Message::ListType reference.
    const Atlas::Message::ListType& asList() const;
    /// Retrieve the current value as a non-const Atlas::Message::ListType reference.
    Atlas::Message::ListType& asList();
    const Atlas::Message::ListType& List() const;
    Atlas::Message::ListType& List();

//     static const char * typeName(Type);


};

class MapType {
class value_type {
	const std::string& first;
	Atlas::Message::Element& second;
};

class iterator {
public:
	value_type& operator*();
	bool operator==(const Atlas::Message::MapType::iterator& value);
};
public:
	void clear();
	int size() const;
	
	
	Atlas::Message::MapType::iterator find(const std::string& index);
	Atlas::Message::MapType::iterator end @ theEnd();
	
	tolua_outside const Atlas::Message::Element& _MapType_findInMap @ get(const std::string& index) const;
	Atlas::Message::Element& __operator_index @ get(const std::string& index);

	MapType();
	~MapType();
};

class ListType {
	void clear();
	int size() const;

	const Atlas::Message::Element& operator[](int index) const;
	Atlas::Message::Element& operator[](int index);
	void push_back @ push_back_int(int val);
	void push_back @ push_back_float(double val);
	void push_back(const std::string& val);
	void push_back(const char* val);
	void push_back(int val);
	void push_back(double val);
	void push_back(bool val);
	void push_back(Atlas::Message::Element val);

	ListType();
	~ListType();
};

} 
} // namespace Atlas::Message

$[
-- Iterator over ListType
function Atlas.Message.ListType:pairs()
  return function(a, i)
    i = i + 1
    if i < a:size() then
      return i, a[i]
    end
  end, self, -1
end
$]

